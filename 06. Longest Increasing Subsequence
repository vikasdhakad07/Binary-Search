Method 01: Longest Increasing Subsequence


class Solution {
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        ArrayList<Integer> list=new ArrayList<>();
        list.add(nums[0]);

        for(int i=1;i<nums.length;i++){
            if(nums[i]>list.get(list.size()-1)){
                list.add(nums[i]);
            }
            else{
                list.set(upperbound(list,nums[i]),nums[i]);
            }
        }
        return list.size();
    }

    private int upperbound(ArrayList<Integer> list, int target){
        int i=0, j=list.size()-1;
        while(i<=j){
            int mid=(i+j)/2;
            if(list.get(mid)<=target){
                i=mid+1;
            }
            else{
                j=mid-1;;
            }
        }
        return list.get(Math.max(j,0))==target? j:i;
    }
}
